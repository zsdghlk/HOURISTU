import { fetchLawJson, toArray } from "@/lib/egov";

/** ユーティリティ：テキスト抽出 */
function textOf(x: any): string {

/** LawTitle / LawName を頑丈に解決 */
function resolveTitle(law: any, fallbackId: string): string {
  const cands = [
    textOf(law?.LawTitle?._),
    textOf(law?.LawTitle),
    textOf(law?.LawName),
    textOf(law?.LawBody?.LawTitle?._),
    textOf(law?.LawBody?.LawTitle),
  ];
  const t = cands.find((s) => s && s.trim().length > 0);
  return t || `（法令名不明：${fallbackId}）`;
}

  if (!x) return "";

/** LawTitle / LawName を頑丈に解決 */
function resolveTitle(law: any, fallbackId: string): string {
  const cands = [
    textOf(law?.LawTitle?._),
    textOf(law?.LawTitle),
    textOf(law?.LawName),
    textOf(law?.LawBody?.LawTitle?._),
    textOf(law?.LawBody?.LawTitle),
  ];
  const t = cands.find((s) => s && s.trim().length > 0);
  return t || `（法令名不明：${fallbackId}）`;
}

  if (typeof x === "string") return x;

/** LawTitle / LawName を頑丈に解決 */
function resolveTitle(law: any, fallbackId: string): string {
  const cands = [
    textOf(law?.LawTitle?._),
    textOf(law?.LawTitle),
    textOf(law?.LawName),
    textOf(law?.LawBody?.LawTitle?._),
    textOf(law?.LawBody?.LawTitle),
  ];
  const t = cands.find((s) => s && s.trim().length > 0);
  return t || `（法令名不明：${fallbackId}）`;
}

  if (typeof x === "number") return String(x);

/** LawTitle / LawName を頑丈に解決 */
function resolveTitle(law: any, fallbackId: string): string {
  const cands = [
    textOf(law?.LawTitle?._),
    textOf(law?.LawTitle),
    textOf(law?.LawName),
    textOf(law?.LawBody?.LawTitle?._),
    textOf(law?.LawBody?.LawTitle),
  ];
  const t = cands.find((s) => s && s.trim().length > 0);
  return t || `（法令名不明：${fallbackId}）`;
}

  if (x._ && typeof x._ === "string") return x._;

/** LawTitle / LawName を頑丈に解決 */
function resolveTitle(law: any, fallbackId: string): string {
  const cands = [
    textOf(law?.LawTitle?._),
    textOf(law?.LawTitle),
    textOf(law?.LawName),
    textOf(law?.LawBody?.LawTitle?._),
    textOf(law?.LawBody?.LawTitle),
  ];
  const t = cands.find((s) => s && s.trim().length > 0);
  return t || `（法令名不明：${fallbackId}）`;
}

  return "";

/** LawTitle / LawName を頑丈に解決 */
function resolveTitle(law: any, fallbackId: string): string {
  const cands = [
    textOf(law?.LawTitle?._),
    textOf(law?.LawTitle),
    textOf(law?.LawName),
    textOf(law?.LawBody?.LawTitle?._),
    textOf(law?.LawBody?.LawTitle),
  ];
  const t = cands.find((s) => s && s.trim().length > 0);
  return t || `（法令名不明：${fallbackId}）`;
}

}

/** LawTitle / LawName を頑丈に解決 */
function resolveTitle(law: any, fallbackId: string): string {
  const cands = [
    textOf(law?.LawTitle?._),
    textOf(law?.LawTitle),
    textOf(law?.LawName),
    textOf(law?.LawBody?.LawTitle?._),
    textOf(law?.LawBody?.LawTitle),
  ];
  const t = cands.find((s) => s && s.trim().length > 0);
  return t || `（法令名不明：${fallbackId}）`;
}


/** 8桁 YYYYMMDD を "YYYY年MM月DD日" にフォーマット（失敗時は原文を返す） */
function formatYmd(s: string): string {
  const m = /^(\d{4})(\d{2})(\d{2})$/.exec(s);
  if (!m) return s;
  return `${m[1]}年${m[2].replace(/^0/,"") }月${m[3].replace(/^0/,"")}日`;
}

/** Article を木構造から収集（Articleのみを深掘り） */
function collectArticles(node: any): any[] {
  if (!node || typeof node !== "object") return [];
  let out: any[] = [];
  if ((node as any).Article) out = out.concat(toArray((node as any).Article));
  for (const k of Object.keys(node)) {
    const v = (node as any)[k];
    if (v && typeof v === "object") {
      const arr = Array.isArray(v) ? v : [v];
      for (const c of arr) out = out.concat(collectArticles(c));
    }
  }
  return out;
}

/** Sentence 系をまとめて文字列化 */
function collectSentences(node: any): string[] {
  if (!node) return [];
  if (typeof node === "string") return [node];
  if (typeof node === "object") {
    const out: string[] = [];
    if ((node as any).Sentence) {
      for (const s of toArray((node as any).Sentence)) out.push(...collectSentences(s));
    }
    if ((node as any).ParagraphSentence) {
      for (const s of toArray((node as any).ParagraphSentence)) out.push(...collectSentences(s));
    }
    if ((node as any)._ && typeof (node as any)._ === "string") out.push((node as any)._);
    return out;
  }
  return [];
}

/** 段落レンダリング */
function renderParagraph(p: any): string {
  const num =
    (typeof p?.ParagraphNum === "string" ? p.ParagraphNum : p?.ParagraphNum?._) ||
    (typeof p?.Num === "string" ? p.Num : p?.Num?._) || "";
  const text = collectSentences(p?.ParagraphSentence ?? p?.Sentence ?? p).join("");
  return `<p>${num ? `<span class="mr-2">${num}</span>` : ""}${text}</p>`;
}

/** 条レンダリング（条番号 → 見出し → 本文） */
function renderArticlePlain(a: any, fallbackKey: string): string {
  const ttl =
    (typeof a?.ArticleTitle === "string" ? a.ArticleTitle : a?.ArticleTitle?._) ||
    (typeof a?.$?.Num === "string" ? a.$.Num : "") || fallbackKey;

  const cap =
    (typeof a?.ArticleCaption === "string" ? a.ArticleCaption : a?.ArticleCaption?._) || "";

  const paragraphs = toArray(a?.Paragraph);
  const bodyHtml = paragraphs.map(renderParagraph).join("");

  const heading =
    `<h3 class="text-lg font-semibold mt-8 mb-2">` +
    `${ttl}${cap ? `　${cap}` : ""}` +
    `</h3>`;
  return heading + bodyHtml;
}

/** Article番号（Num）を取得（なければ空） */
function getArticleNum(a: any): string {
  const n = a?.$?.Num ?? a?.Num ?? (typeof a?.ArticleTitle === "string" ? a.ArticleTitle : a?.ArticleTitle?._);
  return typeof n === "string" ? n : "";
}

/** グループ見出し（インラインCSSで確実に強調） */
function groupBadge(label: "附則" | "改正経過", n: number, meta?: string): string {
  const base = `
    display:inline-block;
    font-weight:700;
    font-size:0.95rem;
    line-height:1.4;
    padding:2px 10px;
    border-radius:6px;
    border:1px solid rgba(0,0,0,0.12);
    margin-right:.5rem;
  `;
  const colors =
    label === "附則"
      ? "color:#065f46;background:#d1fae5;border-color:#34d399;"   /* 緑系 */
      : "color:#3730a3;background:#e0e7ff;border-color:#818cf8;"; /* 紫系 */
  const metaSpan = meta
    ? `<span style="font-size:.85rem;color:#374151;">${meta}</span>`
    : "";
  return `
    <div style="margin-top:3rem;margin-bottom:1rem;border-top:1px dashed rgba(0,0,0,0.25);padding-top:0.75rem;">
      <span style="${base}${colors}">（${label} 第${n}群）</span>${metaSpan}
    </div>`;
}

/** 附則セクション：条番号が 1 に戻ったらグループ切替（メタは基本無し） */
function renderSupplGrouped(root: any): string {
  const arts = collectArticles(root);
  if (!arts.length) return "";
  let html = "";
  let group = 0;
  let lastNum = "";

  for (let i = 0; i < arts.length; i++) {
    const a = arts[i];
    const num = getArticleNum(a);
    if (i === 0 || (num === "1" && lastNum && lastNum !== "1")) {
      group += 1;
      html += groupBadge("附則", group);  // 附則はメタが取りにくいので番号のみ
    }
    html += renderArticlePlain(a, String(i + 1));
    lastNum = num || lastNum;
  }
  return html;
}

/** 改正経過セクション：AmendLaw 単位で確実にグルーピングし、メタ（法律番号・公布日）を表示 */
function renderAmendGrouped(root: any): string {
  if (!root) return "";
  const amendLaws = toArray((root as any)?.AmendLaw);
  // AmendLaw がある場合はそれをグループ単位として扱う
  if (amendLaws.length > 0) {
    let html = "";
    amendLaws.forEach((lawNode: any, idx: number) => {
      // メタ情報の抽出（よくあるパターンをケア）
      const lawNum =
        textOf(lawNode?.LawNum) ||
        textOf(lawNode?.$?.LawNum) ||
        textOf(root?.LawNum) || "";

      const promRaw =
        textOf(lawNode?.PromulgationDate) ||
        textOf(lawNode?.Promulgation) ||
        textOf(lawNode?.$?.PromulgationDate) || "";

      const prom = promRaw ? formatYmd(promRaw) : "";
      const title = resolveTitle(law, lawId);

      // メタ行の文言を作成
      const metaParts = [];
      if (title) metaParts.push(title);
      if (lawNum) metaParts.push(`法律番号：${lawNum}`);
      if (prom) metaParts.push(`公布：${prom}`);
      const meta = metaParts.join("　");

      html += groupBadge("改正経過", idx + 1, meta || undefined);

      // この AmendLaw の Article を描画
      const arts = collectArticles(lawNode);
      if (arts.length) {
        html += arts.map((a: any, i: number) => renderArticlePlain(a, String(i + 1))).join("");
      } else {
        // 念のため、Article が無い特殊ケースでもメタだけは残す
        html += `<p style="color:#6b7280;">（条文なし）</p>`;
      }
    });
    return html;
  }

  // AmendLaw が無い場合は、従来どおり「条番号1リセット」をトリガにグルーピング
  const arts = collectArticles(root);
  if (!arts.length) return "";
  let html = "";
  let group = 0;
  let lastNum = "";
  for (let i = 0; i < arts.length; i++) {
    const a = arts[i];
    const num = getArticleNum(a);
    if (i === 0 || (num === "1" && lastNum && lastNum !== "1")) {
      group += 1;
      html += groupBadge("改正経過", group);
    }
    html += renderArticlePlain(a, String(i + 1));
    lastNum = num || lastNum;
  }
  return html;
}

export default async function LawPage(props: { params: Promise<{ lawId: string }> }) {
  const { lawId } = await props.params;
  const law = await fetchLawJson(lawId);
  const body = law?.LawBody ?? {};

  const title = resolveTitle(law, lawId);
    (typeof law?.LawTitle === "string" ? law?.LawTitle : law?.LawTitle?._) ||
    law?.LawName || "（無題の法令）";

  /** 施行日情報（EnactStatement はタイトル直下 ／ 小さめ表示） */
  const enactHtml = toArray(law?.EnactStatement)
    .map((x: any) => (typeof x === "string" ? x : (x?._ ?? "")))
    .filter(Boolean)
    .map((t) => `<p>${t}</p>`)
    .join("");

  /** 本文（MainProvision配下 Articleのみ） */
  const mainArticles = collectArticles(body?.MainProvision);
  const mainHtml = mainArticles.map((a: any, i: number) => renderArticlePlain(a, String(i + 1))).join("");

  /** 附則・改正（グループ見出しを自動挿入。改正はメタを付ける） */
  const supplHtml = renderSupplGrouped(body?.SupplProvision);
  const amendHtml = renderAmendGrouped(body?.AmendProvision);

  /** 改正年月日（必要があればここに抽出を追加） */
  const amendDates = (() => {
    const info = (body as any)?.AmendProvision?.AmendLawInfo;
    if (!info) return "";
    const txt = collectSentences(info).join("") ||
      toArray(info).map((x: any) => (typeof x === "string" ? x : (x?._ ?? ""))).join("");
    return txt ? `<p>${txt}</p>` : "";
  })();

  /** ページ上部の説明（本文・附則・改正経過の違い） */
  const hasSuppl = !!body?.SupplProvision; 
  const hasAmend = !!body?.AmendProvision; 
  const aboutLines: string[] = [
    `<p class="mb-2"><span class="font-bold text-blue-700 dark:text-blue-300">📖 本文</span> …… 法律の本体部分（第1条〜最終条）。</p>`
  ];
  if (hasSuppl) {
    aboutLines.push(`<p class="mb-2"><span class="font-bold text-green-700 dark:text-green-300">📌 附則</span> …… 制定や改正に伴う施行期日・経過措置・特例などをまとめた部分。改正のたびに新しい附則が追加されるため、附則内でも「第一条」から番号が再開する場合があります。</p>`);
  }
  if (hasAmend) {
    aboutLines.push(`<p class="mb-0"><span class="font-bold text-purple-700 dark:text-purple-300">📝 改正経過</span> …… 歴代の改正法に関する附則などを時系列でまとめた領域です。このサイトでは、改正法ごとに<strong>法律番号・公布年月日</strong>等のメタ情報をグループ見出しとして表示します。</p>`);
  }
}
