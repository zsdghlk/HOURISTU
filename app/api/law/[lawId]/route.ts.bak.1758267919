import { NextResponse } from "next/server";
import {
  fetchLawJson,
  listArticleKeys,
  findArticleByKey,
  renderArticleHtml,
  toArray,
} from "@/lib/egov";

/** Preamble(前文) → HTML */
function renderPreambleHtml(law: any): string {
  const pre = law?.LawBody?.Preamble;
  if (!pre) return "";
  const paras = toArray(pre.Paragraph);
  if (!paras.length) return "";
  const body = paras.map((p: any) => {
    // 憲法の前文は Paragraph > ParagraphSentence > Sentence の入れ子
    const ss = toArray(p?.ParagraphSentence?.Sentence);
    const text = ss.map((s: any) => (typeof s === "string" ? s : s?._ || "")).join("");
    return `<div class="mb-3 leading-relaxed">${text}</div>`;
  }).join("");
  return body
    ? `<header class="mb-2"><h2 class="text-xl font-semibold">前文</h2></header>${body}`
    : "";
}

export async function GET(_req: Request, ctx: { params: Promise<{ lawId: string }> }) {
  try {
    const { lawId } = await ctx.params;

    // e-Gov V1 XML → JSON(Law)
    const law = await fetchLawJson(lawId);

    // タイトル候補
    const title =
      law?.LawBody?.LawTitle ||
      law?.LawTitle ||
      law?.LawName ||
      law?.title ||
      "（無題の法令）";

    // 1) Article（本文・附則）をHTML化
    const keys = listArticleKeys(law);
    let html = keys
      .map((k) => {
        const art = findArticleByKey(law, k);
        return art ? renderArticleHtml(art, k) : "";
      })
      .join("");

    // 2) もし Article が取れなかった/ゼロなら、Preamble(前文)を出す
    if (!html || html.trim().length === 0) {
      html = renderPreambleHtml(law);
    } else {
      // Article がある場合でも、Preamble が存在すれば最初に差し込んでおく
      const pre = renderPreambleHtml(law);
      if (pre) html = pre + html;
    }

    return NextResponse.json(
      { ok: true, lawId, law: { title, html } },
      { headers: { "Cache-Control": "no-store" } }
    );
  } catch (e: any) {
    return NextResponse.json({ ok: false, error: String(e?.message ?? e) }, { status: 502 });
  }
}
