import { parseStringPromise } from "xml2js";

/** e-Gov V1 lawdata XML を取得（2MB制限回避のため no-store） */
export async function fetchLawJson(lawId: string) {
  const url = `https://laws.e-gov.go.jp/api/1/lawdata/${lawId}`;
  const res = await fetch(url, { cache: "no-store" });
  if (!res.ok) throw new Error(`fetch failed: ${url} status=${res.status}`);
  const xml = await res.text();
  const json = await parseStringPromise(xml, { explicitArray: false });
  const law = getLawRoot(json);
  if (!law) throw new Error("failed to locate Law node in XML");
  return law;
}

/** util */
export function toArray<T>(x: T | T[] | undefined): T[] {
  if (!x) return [];
  return Array.isArray(x) ? x : [x];
}

/** Law ノード探索 */
function getLawRoot(json: any): any {
  const v1 = json?.DataRoot?.ApplData?.LawFullText?.Law;
  if (v1) return v1;
  const v2 = json?.DataRoot?.Law;
  if (v2) return v2;
  const v3 = json?.Law || json?.DataRoot?.ApplData?.Law;
  if (v3) return v3;
  return deepFindLaw(json);
}
function deepFindLaw(node: any): any {
  if (!node || typeof node !== "object") return null;
  if ((node as any).LawBody) return node;
  for (const k of Object.keys(node)) {
    const found = deepFindLaw((node as any)[k]);
    if (found) return found;
  }
  return null;
}

/** 「第○条」系から "9" "9-2" に正規化（必ず export） */
export function normalizeArticleKey(article: any): string | null {
  const t = article?.ArticleTitle || article?.ArticleNum || article?.Num || article?.$?.Num || "";
  const key = String(t).replace(/[^\d\-]/g, "");
  return key || null;
}

/** 本文 Article[] を列挙（Chapter/Section配下も走査） */
export function listArticleKeys(law: any): string[] {
  const collect = (node: any): any[] => {
    if (!node) return [];
    let arr: any[] = [];
    if (node.Article) arr = arr.concat(toArray(node.Article));
    if (node.Chapter) arr = arr.concat(...toArray(node.Chapter).map(collect));
    if (node.Section) arr = arr.concat(...toArray(node.Section).map(collect));
    if (node.Subsection) arr = arr.concat(...toArray(node.Subsection).map(collect));
    if (node.Division) arr = arr.concat(...toArray(node.Division).map(collect));
    if (node.Part) arr = arr.concat(...toArray(node.Part).map(collect));
    return arr;
  };
  const main = collect(law?.LawBody?.MainProvision);
  const suppl = toArray(law?.LawBody?.SupplProvision?.Article);
  const all = [...main, ...suppl];
  const keys: string[] = [];
  for (const a of all) {
    const k = normalizeArticleKey(a);
    if (k) keys.push(k);
  }
  return keys;
}

/** 指定キーに一致する Article を返す */
export function findArticleByKey(law: any, artKey: string): any | null {
  const collect = (node: any): any[] => {
    if (!node) return [];
    let arr: any[] = [];
    if (node.Article) arr = arr.concat(toArray(node.Article));
    if (node.Chapter) arr = arr.concat(...toArray(node.Chapter).map(collect));
    if (node.Section) arr = arr.concat(...toArray(node.Section).map(collect));
    if (node.Subsection) arr = arr.concat(...toArray(node.Subsection).map(collect));
    if (node.Division) arr = arr.concat(...toArray(node.Division).map(collect));
    if (node.Part) arr = arr.concat(...toArray(node.Part).map(collect));
    return arr;
  };
  const all = [
    ...collect(law?.LawBody?.MainProvision),
    ...toArray(law?.LawBody?.SupplProvision?.Article),
  ];
  for (const a of all) {
    const k = normalizeArticleKey(a);
    if (k === artKey) return a;
  }
  return null;
}

/** Sentence ノードをテキストへ */
function sentenceToText(s: any): string {
  if (typeof s === "string") return s;
  if (s && typeof s._ === "string") return s._;
  return "";
}

/** Paragraph → HTML（ParagraphSentence に対応） */
function renderParagraph(p: any): string {
  const pnum = p?.Num || p?.$?.Num || p?.ParagraphNum || "";
  const pnumHtml = pnum ? `<span class="inline-block min-w-8 mr-1 text-muted-foreground select-none">${pnum}</span>` : "";

  // ★ 重要：ParagraphSentence 経由の Sentence も拾う
  const sentences = toArray(p?.ParagraphSentence?.Sentence ?? p?.Sentence);
  const paraText = sentences.map(sentenceToText).join("");

  const items = toArray(p?.Item);
  let itemsHtml = "";
  if (items.length) {
    const li = items.map((it) => {
      const num = it?.Num || it?.$?.Num || "";
      const s = toArray(it?.ParagraphSentence?.Sentence ?? it?.Sentence)
        .map(sentenceToText)
        .join("");
      return `<li class="leading-relaxed"><span class="font-semibold">${num}</span>　${s}</li>`;
    }).join("");
    itemsHtml = `<ol class="list-decimal list-outside pl-6 space-y-1 mt-2">${li}</ol>`;
  }

  return `<div class="mb-3 leading-relaxed">${pnumHtml}<span>${paraText}</span>${itemsHtml}</div>`;
}

/** Article → HTML */
export function renderArticleHtml(article: any, artKey: string): string {
  const titleRaw = article?.ArticleTitle || article?.$?.Title || article?.Title || `第${artKey}条`;
  const title = typeof titleRaw === "string" ? titleRaw : `第${artKey}条`;
  const paragraphs = toArray(article?.Paragraph);
  const bodyHtml = paragraphs.map(renderParagraph).join("");
  return `<header class="mb-2"><h2 class="text-xl font-semibold">${title}</h2></header>${bodyHtml || ""}`;
}
